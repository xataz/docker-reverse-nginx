#!/bin/bash

source /usr/local/bin/functions

# Check /var/run/docker.sock
f_log INF "Check if /var/run/docker.sock exist ..."
ls /var/run/docker.sock > /dev/null 2>&1
if [ $? == 0 ]; then
    f_log INF "/var/run/docker.sock exist ..."
else
    f_log ERR "/var/run/docker.sock don't exist ..."
    exit 1 
fi


f_log INF "Start reverse configuration ..."

# Prepare container
f_log INF "Create user 'reverse' ..."
if [ "$(grep ':'${GID}':' /etc/group)" == "" ]; then
    addgroup -g ${GID} reverse
    GROUP_NAME=reverse
else
    GROUP_NAME=$(grep ':'${GID}':' /etc/group | cut -d: -f1)
    echo ${GROUP_NAME}
fi
f_log SUC "Create user 'reverse' done"

if [ "$(grep ${UID} /etc/passwd)" == "" ]; then
    adduser -H -s /bin/sh -D -G ${GROUP_NAME} -u ${UID} reverse
fi
f_log INF "Create folder ..."
mkdir -p /nginx /nginx/log /nginx/run /nginx/sites-enabled /nginx/ssl/private
f_log SUC "Create folder done"

# Generate nginx configuration
f_log INF "Generate SSL configuration ..."
sed -i "s/<ssl_protocols>/${TLS_VERSIONS}/" /nginx/conf.d/ssl.conf
sed -i "s/<ecdh_curve>/${ECDH_CURVE}/" /nginx/conf.d/ssl.conf
f_log SUC "Generate SSL configuration done"

# Configure default site
if [[ "${DEFAULT_SITE,,}" == "false" ]] || [[ "${DEFAULT_SITE,,}" == "disable" ]]; then
    rm -f /nginx/sites-enabled/default.conf
fi

# Download OCSP
f_log INF "Download Letsencrypt Certs ..."
rm -f /nginx/ssl/private/ocsp-certs.pem && wget -O- https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem https://letsencrypt.org/certs/lets-encrypt-x4-cross-signed.pem | tee -a /nginx/ssl/private/letsencrypt-certs.pem > /dev/null 2>&1
f_log SUC "Download Letsencrypt Certs done"

# Generate file
if [ -e /var/run/docker.sock ]; then
    date +%s > /tmp/timestamp
    if [ "${SWARM}" == "enable" ]; then
        for service in $(curl --unix-socket /var/run/docker.sock http://localhost/services 2> /dev/null | jq '.[].Spec.Name' | sed -e 's|.*"/\(.*\)"$|\1|;/\[/d;/\]/d' -e 's/"//g'); do 
            CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${service} 2> /dev/null | jq '.Spec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
            if [ "${CONTAINER_LABELS}" == "" ]; then
                CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${service} 2> /dev/null | jq '.Spec.TaskTemplate.ContainerSpec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
            fi
            if [ "${CONTAINER_LABELS}" != "" ]; then
                f_make_conf ${service}
            fi
        done
    else
        for container in $(curl --unix-socket /var/run/docker.sock http://localhost/containers/json 2> /dev/null | jq '.[].Names' | sed 's|.*"/\(.*\)"$|\1|;/\[/d;/\]/d'); do 
            CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/containers/${container}/json 2> /dev/null | jq '.Config.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
            if [ "${CONTAINER_LABELS}" != "" ]; then
                f_make_conf ${container}
            fi
        done
    fi
else
    rm -rf /etc/s6.d/watch_docker
fi

f_log INF "Apply permissions ..."
chown -R ${UID}:${GID} /nginx /etc/s6.d
chmod +x /usr/local/bin/*
find /etc/s6.d -name run -exec chmod +x {} \;
find /etc/s6.d -name finish -exec chmod +x {} \;
f_log SUC "Apply permissions done"

f_log SUC "End reverse configuration"


## run s6
if [ $# -gt 0 ]; then
    exec su-exec ${UID}:${GID} "$@"
else
    exec su-exec ${UID}:${GID} /bin/s6-svscan /etc/s6.d    
fi
