#!/bin/bash

## Variables
CSI="\033["
CEND="${CSI}0m"
CRED="${CSI}1;31m"
CGREEN="${CSI}1;32m"
CYELLOW="${CSI}1;33m"
CBLUE="${CSI}1;34m"


## Functions
f_log() {
    LOG_TYPE=$1
    LOG_MESSAGE=$2

    case "${LOG_TYPE}" in
    "INF")
        echo -e "${CBLUE}=INF= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    "SUC")
        echo -e "${CGREEN}=SUC= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    "WRN")
        echo -e "${CYELLOW}=WRN= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    "ERR")
        echo -e "${CRED}=ERR= $(date +%Y/%m/%d-%H:%M:%S) ${LOG_MESSAGE}${CEND}"
    ;;
    esac
}

f_gen_sites_enabled() {
    template_sites=/templates/sites-enabled.tmpl

    for domain_name in ${FRONTEND_DOMAIN}; do
        export domain_name
            gucci ${template_sites} > /nginx/sites-enabled/${domain_name}.conf
    done
}

f_gen_location() {
    container_name=$1
    for domain_name in ${FRONTEND_DOMAIN}; do
        export domain_name
        if [ ! -d /nginx/path.d/${domain_name} ]; then
            mkdir -p /nginx/path.d/${domain_name}
        fi

        if [ "${FRONTEND_PATH}" == "/" ]; then
            path_file=/nginx/path.d/${domain_name}/base.conf
            auth_file=/nginx/auth/${domain_name}/base.auth
        else
            path_file=/nginx/path.d/${domain_name}/${FRONTEND_PATH}.conf
            auth_file=/nginx/auth/${domain_name}/${FRONTEND_PATH}.auth
        fi
        if [ ! -e ${path_file} ]; then
            mkdir -p /nginx/auth/${domain_name}
            export frontend_auth=${FRONTEND_AUTH}
            export frontend_path=${FRONTEND_PATH}
            export backend_addr=${container_name}
            export frontend_path=${FRONTEND_PATH}
            export backend_port=${BACKEND_PORT}
            export auth_file=${auth_file}
            export frontend_domain_max_body_size=${FRONTEND_MAX_BODY_SIZE}

            gucci /templates/path.tmpl > ${path_file}
            gucci /templates/auth.tmpl > ${auth_file}
        fi
    done
}

f_gen_certs() {
    container_name=$1
    for domain_name in ${FRONTEND_DOMAIN}; do
        export domain_name
        if [[ "${FRONTEND_SSL}" == "enable" ]] || [[ "${FRONTEND_SSL}" == "true" ]]; then
            CERTFILE=/nginx/ssl/certificates/${domain_name}.crt
            KEYFILE=/nginx/ssl/certificates/${domain_name}.key
            if [ ! -e ${CERTFILE} ] && [ ! -e ${KEYFILE} ]; then
                mkdir -p /nginx/www/${domain_name}
                ps -ef | grep -v s6-supervise | grep -v grep | grep nginx > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                    f_log INF "Generate Certificate for ${domain_name} ..."
                    /usr/local/bin/lego -a -m ${EMAIL} -d ${domain_name} --path /nginx/ssl --http :8080 --tls :8443 -k ${FRONTEND_SSLTYPE} run > /tmp/lego.log 2>&1
                    [[ $? == 0 ]] && f_log SUC "New Certificate for ${domain_name} generated" || (f_log ERR "New Certificate for ${domain_name} not generated" && cat /tmp/lego.log)
                    chown -R ${UID}:${GID} /nginx/ssl/
                else
                    template_lets=/templates/letsencrypt-temp.tmpl
                    gucci ${template_lets} > /nginx/sites-enabled/temp.conf
                    f_reload_nginx
                    /usr/local/bin/lego -a -m ${EMAIL} -d ${domain_name} --path /nginx/ssl --webroot /nginx/www/${domain_name} -k ${FRONTEND_SSLTYPE} run > /tmp/lego.log 2>&1
                    [[ $? == 0 ]] && f_log SUC "New Certificate for ${domain_name} generated" || (f_log ERR "New Certificate for ${domain_name} not generated" && cat /tmp/lego.log)
                    rm -rf /nginx/sites-enabled/temp.conf
                    chown -R ${UID}:${GID} /nginx/ssl/
                    f_reload_nginx
                fi
            fi
        fi
    done
}

f_gen_scts() {
    container_name=$1
    for domain_name in ${FRONTEND_DOMAIN}; do
        export domain_name
        if [ "${FRONTEND_CT}" == "true" ] || [ "${FRONTEND_CT}" == "enable" ]; then
            mkdir -p /nginx/ssl/timestamps/${domain_name}
            CERTFILE=/nginx/ssl/certificates/${domain_name}.crt
            SCTFILE=nginx/ssl/timestamps/${domain_name}/fullchain.sct
            if [ ! -f ${SCTFILE} ]; then
                ct-submit ct.googleapis.com/pilot <${CERTFILE}>${SCTFILE}
            fi
        fi
    done
}

f_reload_nginx() {
    f_log INF "Reload nginx"
    nginx -s reload
    if [ $? -ne 0 ]; then
        f_log ERR "Error : Reload nginx Failed"
    else
        f_log SUC "Reload nginx done"
    fi
}

f_make_conf() {
    FRONTEND_DOMAIN=mydomain.local
    FRONTEND_MAX_BODY_SIZE=200M
    FRONTEND_SSLTYPE=ec384
    BACKEND_PORT=8080
    FRONTEND_PATH="/"
    FRONTEND_SSL=disable
    FRONTEND_AUTH=""
    FRONTEND_HSTS=enable
    FRONTEND_OCSP=enable
    FRONTEND_CT=disable
    FRONTEND_CIPHER=${CIPHER_SUITE}

    export reverse_frontend_domain=${FRONTEND_DOMAIN}
    export reverse_frontend_path=${FRONTEND_PATH}
    export reverse_frontend_auth=${FRONTEND_AUTH}
    export reverse_frontend_ssl=${FRONTEND_SSL}
    export reverse_frontend_ssltype=${FRONTEND_SSLTYPE}
    export reverse_frontend_domain_max_body_size=${FRONTEND_MAX_BODY_SIZE}
    export reverse_backend_port=${BACKEND_PORT}
    export reverse_frontend_hsts=${FRONTEND_HSTS}
    export reverse_frontend_ocsp=${FRONTEND_OCSP}
    export reverse_frontend_ct=${FRONTEND_CT}
    export reverse_frontend_cipher=${FRONTEND_CIPHER}

    container_name=$1
    OLD_IFS=${IFS}
    IFS=$'\n' 
    if [ "${CONTAINER_LABELS}" != "" ]; then
        for label in ${CONTAINER_LABELS}; do
            case "$(echo ${label} | awk '{print $1}')" in
                "reverse.frontend.domain")
                    FRONTEND_DOMAIN=""
                    FRONTEND_DOMAIN=$(echo ${label} | awk '{print $2}' | sed 's/,/ /g')
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.path")
                    FRONTEND_PATH="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.auth")
                    FRONTEND_AUTH="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.ssltype")
                    FRONTEND_SSLTYPE="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.domain_max_body_size")
                    FRONTEND_MAX_BODY_SIZE="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.ssl")
                    FRONTEND_SSL="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.cipher")
                    FRONTEND_CIPHER="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.backend.port")
                    BACKEND_PORT="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.hsts")
                    FRONTEND_HSTS="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.ocsp")
                    FRONTEND_OCSP="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.frontend.ct")
                    FRONTEND_CT="$(echo ${label} | awk '{print $2}')"
                    KEY=$(echo ${label} | awk '{print $1}' | tr '.' '_')
                    VALUE=$(echo ${label} | awk '{print $2}')
                    export $(echo ${KEY}=${VALUE})
                ;;
                "reverse.custom.*")

                ;;
            esac
        done
        IFS=${OLD_IFS}
        f_log INF "Generate configuration for ${FRONTEND_DOMAIN}, with options :"
        f_log INF "             path=${FRONTEND_PATH}"
        f_log INF "             auth=${FRONTEND_AUTH}" 
        f_log INF "             port=${BACKEND_PORT}"
        f_log INF "             ssl=${FRONTEND_SSL}"
        if [ "${FRONTEND_SSL}" == "true" ] || [ "${FRONTEND_SSL}" == "enable" ]; then 
                f_log INF "             ssl_type=${FRONTEND_SSLTYPE}"
                f_log INF "             cipher=${FRONTEND_CIPHER}"
                f_log INF "             hsts=${FRONTEND_HSTS}"
                f_log INF "             ocsp=${FRONTEND_OCSP}"
                f_log INF "             ct=${FRONTEND_CT}"
        fi
        f_gen_certs ${container_name}
        f_gen_location ${container_name}
        f_gen_sites_enabled
        f_gen_scts ${container_name}
        f_log SUC "Configuration for ${FRONTEND_DOMAIN} done"
    fi
}


f_remove_conf() {
    PATH_FILES="/nginx/path.d/${1}"
    SITE_FILES="/nginx/sites-enabled/${1}.conf"
    NGINX_RELOAD=0

    if [ -e ${PATH_FILES} ]; then
        rm -rf ${PATH_FILES}
        NGINX_RELOAD=1
    fi
    if [ -e ${SITE_FILES} ]; then
        rm -rf ${SITE_FILES}
        NGINX_RELOAD=1
    fi

    if [ ${NGINX_RELOAD} -eq 1 ]; then
        f_log INF "$1 removed"
        f_reload_nginx
    fi

}


f_service_create() {
    CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${1} 2> /dev/null | jq '.Spec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    if [ "${CONTAINER_LABELS}" == "" ]; then
        CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/services/${1} 2> /dev/null | jq '.Spec.TaskTemplate.ContainerSpec.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    fi
    if [ "${CONTAINER_LABELS}" != "" ]; then
        f_log INF "Service $1 created"
        f_make_conf ${1}
        f_reload_nginx
    fi    
}

f_service_remove() {
    LIST_DOMAINS=$(grep -rn $1 /nginx/path.d/ | cut -d: -f1 | cut -d/ -f4)
    for domain in $LIST_DOMAINS; do
        f_remove_conf $domain
    done
    
}

f_container_start() {
    CONTAINER_LABELS=$(curl --unix-socket /var/run/docker.sock http://localhost/containers/${1}/json 2> /dev/null | jq '.Config.Labels' | grep -E "reverse\." | sed 's|.*"\(.*\)": "\(.*\)".*$|\1 \2|')
    if [ "${CONTAINER_LABELS}" != "" ]; then
        f_log INF "Container $1 created"
        f_make_conf ${1}
        f_reload_nginx
    fi    
}

f_container_die() {
    LIST_DOMAINS=$(grep -rn $1 /nginx/path.d/ | cut -d: -f1 | cut -d/ -f4)
    for domain in $LIST_DOMAINS; do
        f_remove_conf $domain
    done
}

f_analyze_line() {
    TYPE=$(echo $line | jq '.Type' | sed 's/"//g')
    ACTION=$(echo $line | jq '.Action' | sed 's/"//g')
    if [[ "${SWARM}" == "enable" ]] || [[ "${SWARM}" == "true" ]]; then
        SERVICE_NAME=$(echo $line | jq '.Actor.Attributes.name' | sed 's/"//g')
        if [ "${TYPE}" == "service" ]; then
            if [ "${ACTION}" == "create" ]; then
                f_service_create ${SERVICE_NAME}
            elif [ "${ACTION}" == "remove" ]; then
                f_service_remove ${SERVICE_NAME}
            fi
        fi
    else
        CONTAINER_NAME=$(echo $line | jq '.Actor.Attributes.name' | sed 's/"//g')
        if [ "${TYPE}" == "container" ]; then
            if [ "${ACTION}" == "start" ]; then
                f_container_start ${CONTAINER_NAME}
            elif [ "${ACTION}" == "die" ]; then
                f_container_die ${CONTAINER_NAME}
            fi
        fi
    fi
}
